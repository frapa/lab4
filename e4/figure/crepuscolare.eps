%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 1.8.1-20121123-13-g875406c
%%CreationDate: Wed Oct  8 22:29:25 2014
%%Title: /home/francesco/untitled_2.sch
%%Author: (null)
%%BoundingBox: 0 0 393 223
%%Orientation: Portrait
%%Pages: 1
%%EndComments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-40660 -46900 translate
gsave
44200 48600 44200 47800 10 line
44200 48600 44800 48200 10 line
44800 48200 44200 47800 10 line
44300 48450 44300 48350 10 line
44250 48400 44350 48400 10 line
44250 48000 44350 48000 10 line
44000 48400 44200 48400 10 line
44000 48000 44200 48000 10 line
44800 48200 45000 48200 10 line
44500 48400 44500 48600 10 line
gsave
false false false false 161.777776 [(+ 15 V) ] 0 44550 48500 144.444443 text
grestore
44500 48000 44500 47800 10 line
gsave
false false false false 161.777776 [(- 15 V) ] 0 44550 47800 144.444443 text
grestore
60 60 43970 48370 fbox
60 60 44470 48570 fbox
60 60 44470 47770 fbox
grestore
gsave
41900 48400 41900 47600 10 line
41900 48400 42500 48000 10 line
42500 48000 41900 47600 10 line
42000 48250 42000 48150 10 line
41950 48200 42050 48200 10 line
41950 47800 42050 47800 10 line
41700 48200 41900 48200 10 line
41700 47800 41900 47800 10 line
42500 48000 42700 48000 10 line
42200 48200 42200 48400 10 line
gsave
false false false false 161.777776 [(+ 15 V) ] 0 42250 48300 144.444443 text
grestore
42200 47800 42200 47600 10 line
gsave
false false false false 161.777776 [(- 15 V) ] 0 42250 47600 144.444443 text
grestore
newpath
41700 48200
25
0 360 arc
fill
60 60 42170 48370 fbox
60 60 42170 47570 fbox
grestore
gsave
42400 49200 42300 49000 10 line
42300 49000 42200 49200 10 line
42200 49200 42100 49000 10 line
42100 49000 42000 49200 10 line
42400 49200 42500 49000 10 line
42500 49000 42550 49100 10 line
42700 49100 42550 49100 10 line
41800 49100 41952 49100 10 line
42001 49200 41950 49100 10 line
grestore
gsave
false false false false 202.222224 [(R?) ] 0 42000 49300 180.555557 text
grestore
gsave
43500 48100 43400 47900 10 line
43400 47900 43300 48100 10 line
43300 48100 43200 47900 10 line
43200 47900 43100 48100 10 line
43500 48100 43600 47900 10 line
43600 47900 43650 48000 10 line
43800 48000 43650 48000 10 line
42900 48000 43052 48000 10 line
43101 48100 43050 48000 10 line
grestore
gsave
false false false false 202.222224 [(R?) ] 0 43100 48200 180.555557 text
grestore
gsave
44700 47400 44600 47200 10 line
44600 47200 44500 47400 10 line
44500 47400 44400 47200 10 line
44400 47200 44300 47400 10 line
44700 47400 44800 47200 10 line
44800 47200 44850 47300 10 line
45000 47300 44850 47300 10 line
44100 47300 44252 47300 10 line
44301 47400 44250 47300 10 line
grestore
gsave
false false false false 202.222224 [(R?) ] 0 44400 46900 180.555557 text
grestore
gsave
45400 48800 45600 48700 10 line
45600 48700 45400 48600 10 line
45400 48600 45600 48500 10 line
45600 48500 45400 48400 10 line
45400 48800 45600 48900 10 line
45600 48900 45500 48950 10 line
45500 49100 45500 48950 10 line
45500 48200 45500 48352 10 line
45400 48401 45500 48350 10 line
newpath
45500 48200
25
0 360 arc
fill
grestore
gsave
false true false true 202.222224 [(R?) ] 0 46100 48900 180.555557 text
grestore
gsave
45500 50000 45500 49800 10 line
45500 49100 45500 49300 10 line
45600 49600 45500 49500 10 line
45500 49500 45400 49600 10 line
45600 49600 45400 49600 10 line
45600 49500 45400 49500 10 line
45500 49500 45500 49300 10 line
45500 49600 45500 49800 10 line
45640 49570 45740 49470 10 line
45740 49470 45710 49520 10 line
45740 49470 45690 49500 10 line
45640 49500 45740 49400 10 line
45740 49400 45710 49450 10 line
45740 49400 45690 49430 10 line
newpath
45500 50000
25
0 360 arc
fill
newpath
45500 50000
25
0 360 arc
fill
grestore
gsave
false false false false 202.222224 [(D?) ] 0 45900 49500 180.555557 text
grestore
gsave
40900 47800 40900 47700 10 line
40900 47500 40900 47400 10 line
40760 47600 40720 47610 10 line
40720 47610 40750 47640 10 line
40750 47640 40760 47600 10 line
40760 47530 40720 47540 10 line
40720 47540 40750 47570 10 line
40750 47570 40760 47530 10 line
40800 47700 40800 47500 10 line
40900 47500 40800 47570 10 line
40800 47630 40900 47700 10 line
40740 47620 40700 47660 10 line
40700 47660 40700 47630 10 line
40700 47630 40660 47670 10 line
40740 47550 40700 47590 10 line
40700 47590 40700 47560 10 line
40700 47560 40660 47600 10 line
40900 47500 40870 47540 10 line
40870 47540 40850 47510 10 line
40850 47510 40900 47500 10 line
grestore
gsave
false false false false 202.222224 [(Q?) ] 0 40960 47500 180.555557 text
grestore
gsave
44200 47600 44400 47600 10 line
44400 47600 44400 47620 10 line
44400 47620 44200 47620 10 line
44200 47620 44200 47600 10 line
44300 47800 44300 47620 10 line
60 60 44270 47770 fbox
grestore
gsave
43700 48200 43900 48200 10 line
43900 48200 43900 48220 10 line
43900 48220 43700 48220 10 line
43700 48220 43700 48200 10 line
43800 48400 43800 48220 10 line
grestore
gsave
41600 47600 41800 47600 10 line
41800 47600 41800 47620 10 line
41800 47620 41600 47620 10 line
41600 47620 41600 47600 10 line
41700 47800 41700 47620 10 line
grestore
gsave
44150 48800 44300 48800 10 line
43900 48800 44001 48852 10 line
43901 48799 44002 48747 10 line
43900 48700 43700 48800 10 line
43700 48800 43900 48900 10 line
43900 48900 43700 49000 10 line
43700 49000 43900 49100 10 line
43900 48700 43700 48600 10 line
43700 48600 43800 48550 10 line
43800 48400 43800 48550 10 line
43800 49300 43800 49148 10 line
43900 49099 43800 49150 10 line
43900 48800 44150 48800 10 line
60 60 44270 48770 fbox
grestore
gsave
false true false true 202.222224 [(R?) ] 0 44300 49100 180.555557 text
grestore
44000 48000 43800 48000 10 line
42900 48000 42700 48000 10 line
40900 47800 40900 48200 10 line
40900 48200 41700 48200 10 line
41700 48200 41700 49100 10 line
41700 49100 41800 49100 10 line
42800 49100 42800 48000 10 line
42800 49100 42700 49100 10 line
40900 47400 40900 47100 10 line
43400 50000 46000 50000 10 line
43800 50000 43800 49300 10 line
43900 48000 43900 47300 10 line
43900 47300 44100 47300 10 line
45000 47300 45500 47300 10 line
45500 47300 45500 48200 10 line
45000 48200 45500 48200 10 line
60 60 43970 48370 fbox
60 60 44470 48570 fbox
60 60 44470 47770 fbox
newpath
41700 48200
25
0 360 arc
fill
60 60 42170 48370 fbox
60 60 42170 47570 fbox
newpath
45500 48200
25
0 360 arc
fill
newpath
45500 50000
25
0 360 arc
fill
newpath
45500 50000
25
0 360 arc
fill
60 60 44270 47770 fbox
60 60 44270 48770 fbox
newpath
43900 48000
25
0 360 arc
fill
newpath
42800 48000
25
0 360 arc
fill
newpath
41700 48200
25
0 360 arc
fill
newpath
41700 48200
25
0 360 arc
fill
newpath
42800 48000
25
0 360 arc
fill
newpath
42800 48000
25
0 360 arc
fill
60 60 40870 47070 fbox
gsave
[ -1.00 -0.00 0.00 -1.00 43400 50000 ] concat
newpath
-30 -30 moveto
-30 30 lineto
30 0 lineto
closepath
fill
grestore
gsave
[ 1.00 -0.00 0.00 1.00 46000 50000 ] concat
newpath
-30 -30 moveto
-30 30 lineto
30 0 lineto
closepath
fill
grestore
newpath
45500 50000
25
0 360 arc
fill
newpath
43800 50000
25
0 360 arc
fill
newpath
43800 50000
25
0 360 arc
fill
newpath
43800 50000
25
0 360 arc
fill
newpath
43900 48000
25
0 360 arc
fill
newpath
43900 48000
25
0 360 arc
fill
newpath
45500 48200
25
0 360 arc
fill
newpath
45500 48200
25
0 360 arc
fill
showpage
%%End
