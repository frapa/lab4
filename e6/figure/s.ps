%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.8.1-20121123-13-g875406c
%%CreationDate: Fri Oct 24 23:36:18 2014
%%Title: /media/francesco/Fradisk/Universit√†/Labs/Lab4/e6/figure/s.sch
%%Author: (null)
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%EndComments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7793 499 translate 90 rotate
0.761720 0.761720 scale
-39995 -46000 translate
gsave
40400 46600 40600 46600 10 line
40600 46600 40600 46620 10 line
40600 46620 40400 46620 10 line
40400 46620 40400 46600 10 line
40500 46800 40500 46620 10 line
grestore
gsave
44700 50700 44900 50700 10 line
44900 50700 44900 50720 10 line
44900 50720 44700 50720 10 line
44700 50720 44700 50700 10 line
44800 50900 44800 50720 10 line
grestore
gsave
49200 51000 49400 51000 10 line
49400 51000 49400 51020 10 line
49400 51020 49200 51020 10 line
49200 51020 49200 51000 10 line
49300 51200 49300 51020 10 line
grestore
gsave
44400 47200 44600 47200 10 line
44600 47200 44600 47220 10 line
44600 47220 44400 47220 10 line
44400 47220 44400 47200 10 line
44500 47400 44500 47220 10 line
grestore
gsave
48200 46100 48400 46100 10 line
48400 46100 48400 46120 10 line
48400 46120 48200 46120 10 line
48200 46120 48200 46100 10 line
48300 46300 48300 46120 10 line
grestore
gsave
46600 46000 46800 46000 10 line
46800 46000 46800 46020 10 line
46800 46020 46600 46020 10 line
46600 46020 46600 46000 10 line
46700 46200 46700 46020 10 line
grestore
gsave
45300 47500 45500 47500 10 line
45500 47500 45500 47520 10 line
45500 47520 45300 47520 10 line
45300 47520 45300 47500 10 line
45400 47700 45400 47520 10 line
60 60 45370 47670 fbox
grestore
gsave
43000 51100 42900 50900 10 line
42900 50900 42800 51100 10 line
42800 51100 42700 50900 10 line
42700 50900 42600 51100 10 line
43000 51100 43100 50900 10 line
43100 50900 43150 51000 10 line
43300 51000 43150 51000 10 line
42400 51000 42552 51000 10 line
42601 51100 42550 51000 10 line
grestore
gsave
false false false false 202.222224 [(R?) ] 0 42600 51200 180.555557 text
grestore
gsave
45700 52700 45600 52500 10 line
45600 52500 45500 52700 10 line
45500 52700 45400 52500 10 line
45400 52500 45300 52700 10 line
45700 52700 45800 52500 10 line
45800 52500 45850 52600 10 line
46000 52600 45850 52600 10 line
45100 52600 45252 52600 10 line
45301 52700 45250 52600 10 line
grestore
gsave
false false false false 202.222224 [(R?) ] 0 45300 52800 180.555557 text
grestore
gsave
47400 51400 47300 51200 10 line
47300 51200 47200 51400 10 line
47200 51400 47100 51200 10 line
47100 51200 47000 51400 10 line
47400 51400 47500 51200 10 line
47500 51200 47550 51300 10 line
47700 51300 47550 51300 10 line
46800 51300 46952 51300 10 line
47001 51400 46950 51300 10 line
grestore
gsave
false false false false 202.222224 [(R?) ] 0 47000 51500 180.555557 text
grestore
gsave
50300 53100 50200 52900 10 line
50200 52900 50100 53100 10 line
50100 53100 50000 52900 10 line
50000 52900 49900 53100 10 line
50300 53100 50400 52900 10 line
50400 52900 50450 53000 10 line
50600 53000 50450 53000 10 line
49700 53000 49852 53000 10 line
49901 53100 49850 53000 10 line
grestore
gsave
false false false false 202.222224 [(R?) ] 0 49900 53200 180.555557 text
grestore
gsave
47600 47900 47500 47700 10 line
47500 47700 47400 47900 10 line
47400 47900 47300 47700 10 line
47300 47700 47200 47900 10 line
47600 47900 47700 47700 10 line
47700 47700 47750 47800 10 line
47900 47800 47750 47800 10 line
47000 47800 47152 47800 10 line
47201 47900 47150 47800 10 line
grestore
gsave
false false false false 202.222224 [(R?) ] 0 47200 48000 180.555557 text
grestore
gsave
45100 49100 45000 48900 10 line
45000 48900 44900 49100 10 line
44900 49100 44800 48900 10 line
44800 48900 44700 49100 10 line
45100 49100 45200 48900 10 line
45200 48900 45250 49000 10 line
45400 49000 45250 49000 10 line
44500 49000 44652 49000 10 line
44701 49100 44650 49000 10 line
60 60 44470 48970 fbox
grestore
gsave
false false false false 202.222224 [(R?) ] 0 44700 49200 180.555557 text
grestore
gsave
49400 49100 49300 48900 10 line
49300 48900 49200 49100 10 line
49200 49100 49100 48900 10 line
49100 48900 49000 49100 10 line
49400 49100 49500 48900 10 line
49500 48900 49550 49000 10 line
49700 49000 49550 49000 10 line
48800 49000 48952 49000 10 line
49001 49100 48950 49000 10 line
grestore
gsave
false false false false 202.222224 [(R?) ] 0 49000 49200 180.555557 text
grestore
gsave
48200 46900 48400 46800 10 line
48400 46800 48200 46700 10 line
48200 46700 48400 46600 10 line
48400 46600 48200 46500 10 line
48200 46900 48400 47000 10 line
48400 47000 48300 47050 10 line
48300 47200 48300 47050 10 line
48300 46300 48300 46452 10 line
48200 46501 48300 46450 10 line
grestore
gsave
false false false false 202.222224 [(R?) ] 90 48100 46500 180.555557 text
grestore
gsave
43800 51350 43800 51500 10 line
43800 51100 43748 51201 10 line
43801 51101 43853 51202 10 line
43900 51100 43800 50900 10 line
43800 50900 43700 51100 10 line
43700 51100 43600 50900 10 line
43600 50900 43500 51100 10 line
43900 51100 44000 50900 10 line
44000 50900 44050 51000 10 line
44200 51000 44050 51000 10 line
43300 51000 43452 51000 10 line
43501 51100 43450 51000 10 line
43800 51100 43800 51350 10 line
60 60 44170 50970 fbox
grestore
gsave
false false false false 202.222224 [(R?) ] 0 43500 50600 180.555557 text
grestore
gsave
48400 51650 48400 51800 10 line
48400 51400 48348 51501 10 line
48401 51401 48453 51502 10 line
48500 51400 48400 51200 10 line
48400 51200 48300 51400 10 line
48300 51400 48200 51200 10 line
48200 51200 48100 51400 10 line
48500 51400 48600 51200 10 line
48600 51200 48650 51300 10 line
48800 51300 48650 51300 10 line
47900 51300 48052 51300 10 line
48101 51400 48050 51300 10 line
48400 51400 48400 51650 10 line
60 60 48770 51270 fbox
grestore
gsave
false false false false 202.222224 [(R?) ] 0 47900 50900 180.555557 text
grestore
gsave
45900 49350 45900 49500 10 line
45900 49100 45848 49201 10 line
45901 49101 45953 49202 10 line
46000 49100 45900 48900 10 line
45900 48900 45800 49100 10 line
45800 49100 45700 48900 10 line
45700 48900 45600 49100 10 line
46000 49100 46100 48900 10 line
46100 48900 46150 49000 10 line
46300 49000 46150 49000 10 line
45400 49000 45552 49000 10 line
45601 49100 45550 49000 10 line
45900 49100 45900 49350 10 line
60 60 45870 49470 fbox
60 60 46270 48970 fbox
grestore
gsave
false false false false 202.222224 [(R?) ] 0 46000 49300 180.555557 text
grestore
40500 46800 40500 47000 10 line
40500 47000 40700 47000 10 line
44800 50900 44800 51100 10 line
44800 51100 45000 51100 10 line
46000 51300 46800 51300 10 line
49300 51200 49300 51400 10 line
49300 51400 49500 51400 10 line
49100 51800 49100 53000 10 line
49100 53000 49700 53000 10 line
50600 53000 51200 53000 10 line
51200 53000 51200 50000 10 line
51200 50000 44000 50000 10 line
44000 50000 44000 48000 10 line
44000 48000 44700 48000 10 line
42400 51000 42000 51000 10 line
42000 51000 42000 49500 10 line
42000 49500 43000 49500 10 line
43000 49500 43000 47300 10 line
43000 47300 42300 47300 10 line
40700 47600 40000 47600 10 line
40000 47600 40000 48500 10 line
43800 51500 45000 51500 10 line
45100 52600 44500 52600 10 line
44500 52600 44500 51500 10 line
46000 52600 46500 52600 10 line
46500 52600 46500 51300 10 line
47700 51300 47900 51300 10 line
49500 51800 48400 51800 10 line
gsave
49700 52000 49700 51200 10 line
49700 52000 50300 51600 10 line
50300 51600 49700 51200 10 line
49800 51450 49800 51350 10 line
49750 51400 49850 51400 10 line
49750 51800 49850 51800 10 line
49500 51400 49700 51400 10 line
49500 51800 49700 51800 10 line
50300 51600 50500 51600 10 line
50000 51800 50000 52000 10 line
gsave
true false false true 161.777776 [(+ 15 V) ] 0 50200 52200 144.444443 text
grestore
50000 51400 50000 51200 10 line
gsave
true false false false 161.777776 [(- 15 V) ] 0 50200 51000 144.444443 text
grestore
60 60 49970 51970 fbox
60 60 49970 51170 fbox
grestore
gsave
false false false false 202.222224 [(U?) ] 0 49700 52100 180.555557 text
grestore
50500 51600 51200 51600 10 line
44500 47400 44500 47600 10 line
44500 47600 44700 47600 10 line
45700 47800 47000 47800 10 line
48700 47800 47900 47800 10 line
gsave
44900 48200 44900 47400 10 line
44900 48200 45500 47800 10 line
45500 47800 44900 47400 10 line
45000 47650 45000 47550 10 line
44950 47600 45050 47600 10 line
44950 48000 45050 48000 10 line
44700 47600 44900 47600 10 line
44700 48000 44900 48000 10 line
45500 47800 45700 47800 10 line
45200 48000 45200 48200 10 line
gsave
true false false true 161.777776 [(+ 15 V) ] 0 45400 48400 144.444443 text
grestore
45200 47600 45200 47400 10 line
gsave
true false false false 161.777776 [(- 15 V) ] 0 45400 47200 144.444443 text
grestore
60 60 45170 48170 fbox
60 60 45170 47370 fbox
grestore
gsave
false false false false 202.222224 [(U?) ] 0 44900 48300 180.555557 text
grestore
gsave
45200 51700 45200 50900 10 line
45200 51700 45800 51300 10 line
45800 51300 45200 50900 10 line
45300 51150 45300 51050 10 line
45250 51100 45350 51100 10 line
45250 51500 45350 51500 10 line
45000 51100 45200 51100 10 line
45000 51500 45200 51500 10 line
45800 51300 46000 51300 10 line
45500 51500 45500 51700 10 line
gsave
true false false true 161.777776 [(+ 15 V) ] 0 45700 51900 144.444443 text
grestore
45500 51100 45500 50900 10 line
gsave
true false false false 161.777776 [(- 15 V) ] 0 45700 50700 144.444443 text
grestore
60 60 45470 51670 fbox
60 60 45470 50870 fbox
grestore
gsave
false false false false 202.222224 [(U?) ] 0 45200 51800 180.555557 text
grestore
gsave
48900 48000 48900 47200 10 line
48900 48000 49500 47600 10 line
49500 47600 48900 47200 10 line
49000 47450 49000 47350 10 line
48950 47400 49050 47400 10 line
48950 47800 49050 47800 10 line
48700 47400 48900 47400 10 line
48700 47800 48900 47800 10 line
49500 47600 49700 47600 10 line
49200 47800 49200 48000 10 line
gsave
true false false true 161.777776 [(+ 15 V) ] 0 49400 48200 144.444443 text
grestore
49200 47400 49200 47200 10 line
gsave
true false false false 161.777776 [(- 15 V) ] 0 49400 47000 144.444443 text
grestore
60 60 49170 47970 fbox
60 60 49170 47170 fbox
grestore
gsave
false false false false 202.222224 [(U?) ] 0 48900 48100 180.555557 text
grestore
gsave
40700 47900 41000 47900 10 line
gsave
false true false false 161.777776 [(1) ] 0 40900 47950 144.444443 text
grestore
gsave
false false false false 161.777776 [(NC) ] 0 41050 47900 144.444443 text
grestore
40700 47600 41000 47600 10 line
gsave
false true false false 161.777776 [(2) ] 0 40900 47650 144.444443 text
grestore
gsave
false false false false 161.777776 [(VIN) ] 0 41050 47600 144.444443 text
grestore
40700 47300 41000 47300 10 line
gsave
false true false false 161.777776 [(3) ] 0 40900 47350 144.444443 text
grestore
gsave
false false false false 161.777776 [(TEM) ] 0 41050 47300 144.444443 text
grestore
40700 47000 41000 47000 10 line
gsave
false true false false 161.777776 [(4) ] 0 40900 47050 144.444443 text
grestore
gsave
false false false false 161.777776 [(GND) ] 0 41050 47000 144.444443 text
grestore
42000 47900 42300 47900 10 line
gsave
false false false false 161.777776 [(8) ] 0 42100 47950 144.444443 text
grestore
gsave
false true false false 161.777776 [(NC) ] 0 41950 47900 144.444443 text
grestore
42000 47600 42300 47600 10 line
gsave
false false false false 161.777776 [(7) ] 0 42100 47650 144.444443 text
grestore
gsave
false true false false 161.777776 [(NC) ] 0 41950 47600 144.444443 text
grestore
42000 47300 42300 47300 10 line
gsave
false false false false 161.777776 [(6) ] 0 42100 47350 144.444443 text
grestore
gsave
false true false false 161.777776 [(VOUT) ] 0 41950 47300 144.444443 text
grestore
42000 47000 42300 47000 10 line
gsave
false false false false 161.777776 [(5) ] 0 42100 47050 144.444443 text
grestore
gsave
false true false false 161.777776 [(TRIM) ] 0 41950 47000 144.444443 text
grestore
41000 46800 42000 46800 10 line
42000 46800 42000 48200 10 line
42000 48200 41000 48200 10 line
41000 48200 41000 46800 10 line
gsave
false false false false 202.222224 [(REF02) ] 0 41000 48250 180.555557 text
grestore
60 60 40670 47870 fbox
60 60 40670 47270 fbox
60 60 42270 47870 fbox
60 60 42270 47570 fbox
60 60 42270 46970 fbox
grestore
gsave
false true false false 202.222224 [(U?) ] 0 42000 48400 180.555557 text
grestore
gsave
46350 46700 46200 46700 10 line
46600 46700 46499 46648 10 line
46599 46701 46498 46753 10 line
46600 46800 46800 46700 10 line
46800 46700 46600 46600 10 line
46600 46600 46800 46500 10 line
46800 46500 46600 46400 10 line
46600 46800 46800 46900 10 line
46800 46900 46700 46950 10 line
46700 47100 46700 46950 10 line
46700 46200 46700 46352 10 line
46600 46401 46700 46350 10 line
46600 46700 46350 46700 10 line
60 60 46170 46670 fbox
60 60 46670 47070 fbox
grestore
gsave
false false false false 202.222224 [(R?) ] 90 46400 46800 180.555557 text
grestore
gsave
51300 47700 51200 47500 10 line
51200 47500 51100 47700 10 line
51100 47700 51000 47500 10 line
51000 47500 50900 47700 10 line
51300 47700 51400 47500 10 line
51400 47500 51450 47600 10 line
51600 47600 51450 47600 10 line
50700 47600 50852 47600 10 line
50901 47700 50850 47600 10 line
grestore
gsave
false false false false 202.222224 [(R?) ] 0 50900 47800 180.555557 text
grestore
gsave
45700 53400 45600 53200 10 line
45600 53200 45500 53400 10 line
45500 53400 45400 53200 10 line
45400 53200 45300 53400 10 line
45700 53400 45800 53200 10 line
45800 53200 45850 53300 10 line
46000 53300 45850 53300 10 line
45100 53300 45252 53300 10 line
45301 53400 45250 53300 10 line
grestore
gsave
false false false false 202.222224 [(R?) ] 0 45300 53500 180.555557 text
grestore
48300 47800 48300 49000 10 line
48300 49000 48800 49000 10 line
49700 47600 50700 47600 10 line
49700 49000 50300 49000 10 line
50300 49000 50300 47600 10 line
gsave
52200 48100 52200 47900 10 line
gsave
false false false false 121.333336 [(3) ] 0 52100 47950 108.333336 text
grestore
52200 47300 52200 47100 10 line
gsave
false false false false 121.333336 [(2) ] 0 52100 47150 108.333336 text
grestore
52100 47601 300 0 360 10 darc
52200 47300 52000 47500 10 line
52200 47900 52000 47700 10 line
52000 47800 52000 47400 10 line
51600 47600 51784 47600 10 line
gsave
false false false false 121.333336 [(1) ] 0 51700 47650 108.333336 text
grestore
52000 47600 51784 47600 10 line
52200 47300 52164 47372 10 line
52200 47300 52128 47336 10 line
52128 47336 52164 47372 10 line
gsave
false false false false 202.222224 [(2N2222) ] 0 52500 47400 180.555557 text
grestore
grestore
gsave
false false false false 202.222224 [(Q?) ] 0 52500 47600 180.555557 text
grestore
gsave
52100 46600 52300 46600 10 line
52300 46600 52300 46620 10 line
52300 46620 52100 46620 10 line
52100 46620 52100 46600 10 line
52200 46800 52200 46620 10 line
grestore
48700 47400 47500 47400 10 line
47500 47400 47500 46700 10 line
47500 46700 47200 46700 10 line
48300 47200 48300 47400 10 line
52200 46800 52200 47100 10 line
52200 48100 52200 54200 10 line
47000 54200 52200 54200 10 line
47000 54200 47000 53300 10 line
47000 53300 46000 53300 10 line
45100 53300 44500 53300 10 line
44500 53300 44500 55000 10 line
44500 55000 52200 55000 10 line
52200 55000 52200 55300 10 line
60 60 45370 47670 fbox
60 60 44470 48970 fbox
60 60 44170 50970 fbox
60 60 48770 51270 fbox
60 60 45870 49470 fbox
60 60 46270 48970 fbox
newpath
46500 51300
25
0 360 arc
fill
newpath
49100 51800
25
0 360 arc
fill
newpath
49100 51800
25
0 360 arc
fill
newpath
51200 51600
25
0 360 arc
fill
60 60 39970 48470 fbox
newpath
44500 51500
25
0 360 arc
fill
newpath
44500 51500
25
0 360 arc
fill
newpath
44500 51500
25
0 360 arc
fill
newpath
46500 51300
25
0 360 arc
fill
newpath
46500 51300
25
0 360 arc
fill
newpath
49100 51800
25
0 360 arc
fill
60 60 49970 51970 fbox
60 60 49970 51170 fbox
newpath
51200 51600
25
0 360 arc
fill
newpath
51200 51600
25
0 360 arc
fill
newpath
48300 47800
25
0 360 arc
fill
60 60 45170 48170 fbox
60 60 45170 47370 fbox
60 60 45470 51670 fbox
60 60 45470 50870 fbox
60 60 49170 47970 fbox
60 60 49170 47170 fbox
60 60 40670 47870 fbox
60 60 40670 47270 fbox
60 60 42270 47870 fbox
60 60 42270 47570 fbox
60 60 42270 46970 fbox
60 60 46170 46670 fbox
60 60 46670 47070 fbox
newpath
48300 47800
25
0 360 arc
fill
newpath
48300 47800
25
0 360 arc
fill
newpath
50300 47600
25
0 360 arc
fill
newpath
50300 47600
25
0 360 arc
fill
newpath
50300 47600
25
0 360 arc
fill
newpath
48300 47400
25
0 360 arc
fill
gsave
[ -1.00 -0.00 0.00 -1.00 47200 46700 ] concat
newpath
-30 -30 moveto
-30 30 lineto
30 0 lineto
closepath
fill
grestore
newpath
48300 47400
25
0 360 arc
fill
newpath
48300 47400
25
0 360 arc
fill
60 60 52170 55270 fbox
showpage
%%End
